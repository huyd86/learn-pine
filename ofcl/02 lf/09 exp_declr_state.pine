//=== Expressions ===

(high + low + close)/3
sma(high - low, 10) + sma(close, 20)



//=== Variable declaration

baseLine0 = na          // compile time error!
float baseLine1 = na    // OK
baseLine2 = float(na)   // OK

// The var keyword is a special modifier that instructs the compiler to create and initialize the variable only once
//@version=4
study("Green Bars Count")
var count = 0
isGreen = close >= open
if isGreen
    count := count + 1
plot(count)

// In Pine v3 the study “Green Bars Count” could be written without using the var keyword:
//@version=3
study("Green Bars Count")
count = 0                       // These two lines could be replaced in v4
count := nz(count[1], count)    // with 'var count = 0'
isGreen = close >= open
if isGreen
    count := count + 1
plot(count)

// Examples of simple variable declarations:
src = close
len = 10
ma = sma(src, len) + high

// Examples with type modifiers and var keyword:
float f = 10            // NOTE: while the expression is of type int, the variable is float
i = int(close)          // NOTE: explicit cast of float expression close to type int
r = round(close)        // NOTE: round() and int() are different... int() simply throws fractional part away
var hl = high - low

// Example, illustrating the effect of var keyword:
// Creates a new label object on every bar:
label lb = label.new(bar_index, close, text="Hello, World!")
// Creates a label object only on the first bar in history:
var label lb = label.new(bar_index, close, text="Hello, World!")



//=== Variable assignment ===
//@version=4
study("My Script")
price = close
if hl2 > price
    price := hl2
plot(price)



//=== if statement ===

// This code compiles
x = if close > open
    close
else
    open
// This code doesn't compile
x = if close > open
    close
else
    "open"

x = if close > open
    close
// If current close > current open, then x = close.
// Otherwise the x = na.

// It is possible to use either multiple else if blocks or none at all.
x = if open > close
    5
else if high > low
    close
else
    open

// The then, else if and else blocks are shifted by four spaces [1]. 
// if statements can be nested by adding four more spaces:
x = if close > open
    b = if close > close[1]
        close
    else
        close[1]
    b
else
    open

// It is possible and quite frequent to ignore the resulting value of an if statement
if (crossover(source, lower))
    strategy.entry("BBandLE", strategy.long, stop=lower,
                   oca_name="BollingerBands",
                   oca_type=strategy.oca.cancel, comment="BBandLE")
else
    strategy.cancel(id="BBandLE")



//=== for statement ===
//@version=4
study("For loop")
my_sma(price, length) =>
    sum = price
    for i = 1 to length-1
        sum := sum + price[i]
    sum / length
plot(my_sma(close,14))

// Note that some built-in functions may behave unexpectedly in for loop. Let’s look at the following example:
//@version=4
study("RMA in for loop")
sum = 0.0
for i = 1 to 2
    sum := sum + rma(close, i)
plot(sum)
