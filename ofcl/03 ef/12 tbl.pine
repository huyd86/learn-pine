//=== Tables

//=== Introduction

//=== Creating table

//=== Placing a single value in a fixed position

//@version=4
study("ATR", "", true)
// We use `var` to only initialize the table on the first bar.
var table atrDisplay = table.new(position.top_right, 1, 1)
// We call `atr()` outside the `if` block so it executes on each bar.
myAtr = atr(14)
if barstate.islast
    // We only populate the table on the last bar.
    table.cell(atrDisplay, 0, 0, tostring(myAtr))

//@version=4
study("ATR", "", true)
i_atrP = input(14,  "ATR period", minval = 1, tooltip = "Using a period of 1 yields True Range.")

// ————— Produces a string format usable with `tostring()` to restrict precision to ticks.
f_tickFormat() =>
    _s = tostring(syminfo.mintick)
    _s := str.replace_all(_s, "25", "00")
    _s := str.replace_all(_s, "5",  "0")
    _s := str.replace_all(_s, "1",  "0")

var table atrDisplay = table.new(position.top_right, 1, 1, bgcolor = color.gray, frame_width = 2, frame_color = color.black)
myAtr = atr(i_atrP)
if barstate.islast
    table.cell(atrDisplay, 0, 0, tostring(myAtr, f_tickFormat()), text_color = color.white)

//=== Coloring the chart’s background

//@version=4
study("Chart background", "", true)
i_c_bull = input(color.new(color.green, 95), "Bull", inline = "1")
i_c_bear = input(color.new(color.red, 95), "Bear", inline = "1")
// ————— Function colors chart bg on RSI bull/bear state.
f_colorChartBg(_c_bull, _c_bear) =>
    var table _chartBg = table.new(position.middle_center, 1, 1)
    float _r = rsi(close, 20)
    color _c_bg = _r > 50 ? _c_bull : _r < 50 ? _c_bear : na
    if barstate.islast
        table.cell(_chartBg, 0, 0, width = 100, height = 100, bgcolor = _c_bg)

f_colorChartBg(i_c_bull, i_c_bear)

//=== Creating a display panel

//@version=4
study("Price vs MA", "", true)

var string GP1 = "Moving averages"
int     i_masQty    = input(20, "Quantity", minval = 1, maxval = 40, group = GP1, tooltip = "1-40")
int     i_masStart  = input(20, "Periods begin at", minval = 2, maxval = 200, group = GP1, tooltip = "2-200")
int     i_masStep   = input(20, "Periods increase by", minval = 1, maxval = 100, group = GP1, tooltip = "1-100")

var string GP2 = "Display"
string  i_tableYpos = input("top", "Panel position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
color   i_c_bull    = input(color.new(color.green, 30), "Bull", inline = "12", group = GP2)
color   i_c_bear    = input(color.new(color.red, 30), "Bear", inline = "12", group = GP2)
color   i_c_neutral = input(color.new(color.gray, 30), "Neutral", inline = "12", group = GP2)

// ————— Produces a string format usable with `tostring()` to restrict precision to ticks.
f_tickFormat() =>
    string _s = tostring(syminfo.mintick)
    _s := str.replace_all(_s, "25", "00")
    _s := str.replace_all(_s, "5",  "0")
    _s := str.replace_all(_s, "1",  "0")

var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 2, i_masQty + 1)
if barstate.islast
    // Table header.
    table.cell(panel, 0, 0, "MA", bgcolor = i_c_neutral)
    table.cell(panel, 1, 0, "Value", bgcolor = i_c_neutral)

int period = i_masStart
for _i = 1 to i_masQty
    // ————— Call MAs on each bar.
    float _ma = sma(close, period)
    // ————— Only execute table code on last bar.
    if barstate.islast
        // Period in left column.
        table.cell(panel, 0, _i, tostring(period), bgcolor = i_c_neutral)
        // If MA is between the open and close, use neutral color. If close is lower/higher than MA, use bull/bear color.
        _c_bg = close > _ma ? open < _ma ? i_c_neutral : i_c_bull : open > _ma ? i_c_neutral : i_c_bear
        // MA value in right column.
        table.cell(panel, 1, _i, tostring(_ma, f_tickFormat()), text_color = color.black, bgcolor = _c_bg)
    period += i_masStep

//=== Displaying a heatmap

//@version=4
study("Price vs Past", "", true)

var int MAX_LOOKBACK = 300

int     i_lookBack  = input(150, minval = 1, maxval = MAX_LOOKBACK, step = 10)
color   i_c_Bull    = input(#00FF00ff, "Bull", inline = "11")
color   i_c_Bear    = input(#FF0080ff, "Bear", inline = "11")

// ————— Function returning `_color` with `_transp` transparency.
f_colorNew(_color, _transp) =>
    // color _color : base color to derive a new transparency from. Its current transparency is ignored.
    // float _transp: 0-100 transparency of `_color` to return.
    _r = color.r(_color)
    _g = color.g(_color)
    _b = color.b(_color)
    color _return = color.rgb(_r, _g, _b, _transp)

// ————— Function draws a heatmap showing the position of the current `_src` relative to its past `_lookBack` values.
f_drawHeatmap(_src, _lookBack) =>
    // float _src     : evaluated price series.
    // int   _lookBack: number of past bars evaluated.
    // Dependency: MAX_LOOKBACK

    // Force historical buffer to a sufficient size.
    max_bars_back(_src, MAX_LOOKBACK)
    // Only run table code on last bar.
    if barstate.islast
        var _heatmap = table.new(position.bottom_center, _lookBack, 1)
        for _i = 1 to i_lookBack
            float _transp = 100. * _i / _lookBack
            if _src > _src[_i]
                table.cell(_heatmap, _lookBack - _i, 0, bgcolor = f_colorNew(i_c_Bull, _transp))
            else
                table.cell(_heatmap, _lookBack - _i, 0, bgcolor = f_colorNew(i_c_Bear, _transp))

f_drawHeatmap(high, i_lookBack)
