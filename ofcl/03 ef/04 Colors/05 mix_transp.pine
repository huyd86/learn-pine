//@version=4
study("CCI DC", precision = 6)
var color C_GOLD   = #CCCC00ff
var color C_VIOLET = #AA00FFff
int i_p = input(20, "Length", minval = 5)
color i_c_bull = input(C_GOLD,   "Bull")
color i_c_bear = input(C_VIOLET, "Bear")

// ————— Function clamps `_val_` between `_min` and `_max`.
f_clamp(_val, _min, _max) =>
    _return = max(_min, min(_max, _val))

// ————— Volatility expressed as 0-100 value.
float v = atr(i_p / 5) / atr(i_p * 5)
float vPct = percentrank(v, i_p * 5)

// ————— Calculate dynamic lookback for DC. It increases/decreases on low/high volatility.
bool highVolatility = vPct > 50
var int lookBackMin = i_p * 2
var int lookBackMax = i_p * 10
var float lookBack = avg(lookBackMin, lookBackMax)
lookBack += highVolatility ? -2 : 2
lookBack := f_clamp(lookBack, lookBackMin, lookBackMax)

// ————— Dynamic lookback length Donchian channel of signal.
float signal = cci(close, i_p)
// `lookBack` is a float; need to cast it to int to be used a length.
float hiTop  = highest(signal, int(lookBack))
float loBot  = lowest( signal, int(lookBack))
// Get margin of 25% of the DC height to build high and low bands.
float margin = (hiTop - loBot) / 4
float hiBot  = hiTop - margin
float loTop  = loBot + margin
// Center of DC.
float center = avg(hiTop, loBot)

// ————— Create colors.
color c_signal = color.from_gradient(signal, -200, 200, C_VIOLET, C_GOLD)
// Bands: Calculate transparencies so the longer since the hi/lo has changed,
//        the darker the color becomes. Cap highest transparency to 90.
float hiTransp = f_clamp(100 - (100 * max(1, nz(barssince(change(hiTop)) + 1)) / 255), 60, 90)
float loTransp = f_clamp(100 - (100 * max(1, nz(barssince(change(loBot)) + 1)) / 255), 60, 90)
color c_hi = color.new(i_c_bull, hiTransp)
color c_lo = color.new(i_c_bear, loTransp)
// Background: Rescale the 0-100 range of `vPct` to 0-25 to create 75-100 transparencies.
color c_bg = color.new(color.gray, 100 - (vPct / 4))

// ————— Plots
// Invisible lines for band fills.
p_hiTop  = plot(hiTop, color = na)
p_hiBot  = plot(hiBot, color = na)
p_loTop  = plot(loTop, color = na)
p_loBot  = plot(loBot, color = na)
// Plot signal and centerline.
p_signal = plot(signal, "CCI", c_signal, 2)
plot(center, "Centerline", color.silver, 1)

// Fill the bands.
fill(p_hiTop, p_hiBot, c_hi)
fill(p_loTop, p_loBot, c_lo)

// ————— Background.
bgcolor(c_bg)
