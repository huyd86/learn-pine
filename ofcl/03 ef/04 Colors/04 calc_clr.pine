//=== Calculated colors



//=== color.new()

//@version=4
study("Volume")
// We name our color constants to make them more readable.
var color C_GOLD   = #CCCC00ff
var color C_VIOLET = #AA00FFff
color i_c_bull = input(C_GOLD,   "Bull")
color i_c_bear = input(C_VIOLET, "Bear")
int i_levels = input(10, "Gradient levels", minval = 1)
// We initialize only once on bar zero with `var`, otherwise the count would reset to zero on each bar.
var float riseFallCnt = 0
// Count the rises/falls, clamping the range to: 1 to `i_levels`.
riseFallCnt := max(1, min(i_levels, riseFallCnt + sign(volume - nz(volume[1]))))
// Rescale the count on a scale of 80, reverse it and cap transparency to <80 so that colors remains visible.
float transparency = 80 - abs(80 * riseFallCnt / i_levels)
// Build the correct transparency of either the bull or bear color.
color c_volume = color.new(close > open ? i_c_bull : i_c_bear, transparency)
plot(volume, "Volume", c_volume, 1, plot.style_columns)



//=== color.rgb()

//@version=4
study("Holiday candles", "", true)
float r = random(0, 255)
float g = random(0, 255)
float b = random(0, 255)
float t = random(0, 100)
color c_holiday = color.rgb(r, g, b, t)
plotcandle(open, high, low, close, color = c_holiday, wickcolor = c_holiday, bordercolor = c_holiday)



//=== color.from_gradient()

// @version=4
study(title="CCI line gradient", precision=2, resolution="")
var color C_GOLD   = #CCCC00
var color C_VIOLET = #AA00FF
var color C_BEIGE  = #9C6E1B
float i_src = input(close, title="Source")
int i_len = input(20, "Length", minval = 5)
color i_c_bull = input(C_GOLD,   "Bull")
color i_c_bear = input(C_VIOLET, "Bear")
float signal = cci(i_src, i_len)
color c_signal = color.from_gradient(signal, -200, 200, C_VIOLET, C_GOLD)
plot(signal, "CCI", c_signal)
p_bandTop = hline(100,  "Upper Band", color.silver, hline.style_dashed)
p_bandBot = hline(-100, "Lower Band", color.silver, hline.style_dashed)
fill(p_bandTop, p_bandBot, C_BEIGE, title = "Background")
