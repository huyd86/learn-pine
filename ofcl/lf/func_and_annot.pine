study('Example', 'Ex', true)
study(title='Example', shorttitle='Ex', overlay=true)

// It’s possible to mix positional and keyword arguments. 
// Positional arguments must go first and keyword arguments should follow them. 
// So the following call is not valid:
study(precision=3, 'Example') // Compilation error!




//===
// Execution of Pine functions and historical context inside function blocks
//===

//@version=4
study("My Script", overlay=true)

// Returns the value of "a" the last time the function was called 2 bars ago.
f(a) => a[1]
// Returns the value of last bar's "close", as expected.
f2() => close[1]

oneBarInTwo = bar_index % 2 == 0
plot(oneBarInTwo ? f(close) : na, color=color.maroon, linewidth=6, style=plot.style_cross)
plot(oneBarInTwo ? f2() : na, color=color.lime, linewidth=6, style=plot.style_circles)
plot(close[2], color=color.maroon)
plot(close[1], color=color.lime)




// In this script, barssince is not called on every bar because it is inside a ternary operator’s conditional branch:
//@version=4
study("Barssince",overlay=false)
res = close>close[1] ? barssince(close<close[1]) : -1
plot(res, style=plot.style_histogram, color=res >= 0 ? color.red : color.blue)
// This leads to incorrect results because barssince is not executed on every bar:

// The solution is to take the barssince call outside the conditional branch to force its execution on every bar:
//@version=4
study("Barssince",overlay=false)
b = barssince(close<close[1])
res = close>close[1] ? b : -1
plot(res, style=plot.style_histogram, color=res >= 0 ? color.red : color.blue)




//=== Exceptions ===

// Not all built-in functions need to be executed every bar. 
// These are the functions which do not require it, and so do not need special treatment:
abs, acos, asin, atan, ceil, cos, dayofmonth, dayofweek, exp, floor, heikinashi, hour, kagi,
linebreak, log, log10, max, min, minute, month, na, nz, pow, renko, round, second, sign, sin,
sqrt, tan, tickerid, time, timestamp, tostring, weekofyear, year

// Functions called from within a for loop use the same context in each of the loop’s iterations. 
// In the example below, each lowest call on the same bar uses the value that was passed to it (i.e., bar_index), 
// so function calls used in loops do not require special treatment.
//@version=4
study("My Script")
va = 0.0
for i = 1 to 2 by 1
    if (i + bar_index) % 2 == 0
        va := lowest(bar_index, 10)  // same context on each call
plot(va)
