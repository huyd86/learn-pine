// Source: https://kodify.net/tradingview/strategies/unilateral-pairs-trading/
// The Unilateral Pairs Trading strategy programmed for TradingView Pine

//=== Trading rules for the Unilateral Pairs Trading

Enter long rules:
Buy QQQ when the QQQ:SPY ratio is less than -1.5, and
QQQ is 2 percent lower than the previous day’s close.
Exit long rules:
Close the position when the ratio is greater than -0.5.
Enter short rules:
Short QQQ when the QQQ:SPY ratio is greater than 1.5, and
QQQ is 2 percent higher than the previous day’s close.
Exit short rules:
Cover the short position when the ratio is less than 0.5.

//=== Complete code: the Unilateral Pairs Trading strategy for TradingView

//@version=3

// Step 1) Define strategy settings
strategy(title="Unilateral Pairs Trading", overlay=false,
     pyramiding=0, initial_capital=25000,
     default_qty_type=strategy.fixed,
     default_qty_value=100,
     commission_type=strategy.commission.cash_per_order,
     commission_value=8, slippage=2)

// Entry trigger values
longThres  = input(title="Enter Long Threshold", type=float, defval=-1.5)
shortThres = input(title="Enter Short Threshold", type=float, defval=1.5)

// Exit trigger values
exitLongThres  = input(title="Exit Long Threshold", type=float, defval=-0.5)
exitShortThres = input(title="Exit Short Threshold", type=float, defval=0.5)

// Smoothing for ratio of price differences
ratioLen = input(title="Ratio Length", type=integer, defval=20)

// Required price changes for long and short
chgLong  = input(title="Price Change % (Long)", type=float, defval=-2)
chgShort = input(title="Price Change % (Short)", type=float, defval=2)

// Step 2) Calculate strategy values
// Fetch S&P 500 tracker prices
spyData = security("SPY", period, close)

// Calculate price ratio and its average
ratioSeries = close / spyData
ratioSMA    = sma(ratioSeries, ratioLen)

// Calculate the price ratio differences
deltaSeries = ratioSeries - ratioSMA
deltaSMA    = sma(deltaSeries, ratioLen)
deltaDiff   = deltaSeries - deltaSMA

// Normalise differences with standard deviation
deltaNormRatio = deltaDiff / stdev(deltaSeries, ratioLen)

// Calculate price return
closeReturn = ((close - close[1]) / close[1]) * 100

// Step 3) Output strategy data
// Plot normalised ratio of price differences
plot(series=deltaNormRatio, color=navy,
     title="Price Ratio Difs Norm")

// Show long and short trigger levels
hline(price=longThres, color=green, linestyle=solid)
hline(price=shortThres, color=red, linestyle=solid)

// Show long and short exit levels
hline(price=exitLongThres, color=color(green, 25), linestyle=dotted)
hline(price=exitShortThres, color=color(red, 25), linestyle=dotted)

// Highlight price changes (%) that cross threshold
bgColour = (closeReturn < chgLong) ? green :
     (closeReturn > chgShort) ? red :
     na

bgcolor(color=bgColour)

// Step 4) Determine long trading conditions
enterLong = (deltaNormRatio < longThres) and
     (closeReturn <= chgLong)

exitLong = (deltaNormRatio > exitLongThres) and
     (strategy.position_size > 0)

// Step 5) Code short trading conditions
enterShort = (deltaNormRatio > shortThres) and
     (closeReturn >= chgShort)

exitShort = (deltaNormRatio < exitShortThres) and
     (strategy.position_size < 0)

// Step 6) Submit entry orders
if (enterLong)
    strategy.entry(id="EL", long=true)

if (enterShort)
    strategy.entry(id="ES", long=false)

// Step 7) Send exit orders
if (exitLong and not enterShort)
    strategy.order(id="XL", long=false, qty=strategy.position_size)

if (exitShort and not enterLong)
    strategy.order(id="XS", long=true, qty=abs(strategy.position_size))
